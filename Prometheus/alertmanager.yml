# This config alertmanager to Telegram and Opsgenie

global:
  opsgenie_api_key: 1833ebe7-d423-2874-gdd16-c43dff4921
  opsgenie_api_url: https://api.eu.opsgenie.com


# The root route on which each incoming alert enters.
route:
  # The labels by which incoming alerts are grouped together. For example,
  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would
  # be batched into a single group.
  group_by: ['alertname', 'node', 'service', 'env']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  # This way ensures that you get multiple alerts for the same group that start
  # firing shortly after another are batched together on the first
  # notification.
  group_wait: 10s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 5m

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 1h

  # A default receiver for All servers
  receiver: 'default'

  # The child route trees.
  routes:

    # capture All WARN to the 'warning' with P2
    - match:
        severity: warning
      receiver: warning

      routes:
      # forward TEST WARN to the 'default'. We check the server name *-test.* and route to the default
      - match_re:
          alias: .*(-test).*
        receiver: default

      # forward DEMO WARN to the 'default'. We check the server name *-demo.* and route to the default
      - match_re:
          alias: .*(-demo).*
        receiver: default

      # forward DEMO WARN to the 'default'. We check the server name *-dev.* and route to the default
      - match_re:
          alias: .*(-dev).*
        receiver: default
      # if we need special server name route to default, we can add server name
      - match_re:
          alias: .*(myserver).*
        receiver: default


    # capture All CRIT to the 'critical' with P1. In this case all production servers + other with Critical and Warning
    - match:
        severity: critical
      receiver: critical

      routes:
      # forward DEV CRIT to the 'warning'
      - match_re:
          alias: .*(-dev).*
        receiver: warning

      # forward TEST CRIT to the 'default'
      - match_re:
          alias: .*(-test).*
        receiver: default

      # forward DEMO CRIT to the 'default'
      - match_re:
          alias: .*(-demo).*
        receiver: default
        
      # forward DEMO CRIT to the 'default' for 'myserver'
      - match_re:
          alias: .*(myserver).*
        receiver: default

# In this case we create receiver like mail, opsgenie or telegram
receivers:
  - name: 'default'
    opsgenie_configs:
      - send_resolved: true
  - name: 'warning'
    # This line for telegram
    webhook_configs:
      - send_resolved: true
        # Telegram id channel for prometheus telegram bot
        url: http://127.0.0.1:9087/alert/-1001418000000
    opsgenie_configs:
      - priority: P2
  - name: 'critical'
    webhook_configs:
      - send_resolved: true
        # Telegram id channel for prometheus telegram bot
        url: http://127.0.0.1:9087/alert/-1001418000000
    opsgenie_configs:
      - priority: P1
      
# At the end, receivers name "default" send only to opsgenie. Receivers name "warning" and "critical" send to opsgenie and telegram
